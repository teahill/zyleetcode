package com.leetcode.zyang;

import java.util.HashMap;
import java.util.Map;

/**
 * 
 * @author zyang
 * 
 *         Given two strings s and t which consist of only lowercase letters.
 * 
 *         String t is generated by random shuffling string s and then add one
 *         more letter at a random position.
 * 
 *         Find the letter that was added in t.
 * 
 *         Example:
 * 
 *         Input: s = "abcd" t = "abcde"
 * 
 *         Output: e
 * 
 *         Explanation: 'e' is the letter that was added.
 */
public class L0389_FindDifference {
	//char means exactly one character. You can't assign zero characters to this type
	//That means that there is no char value for which String.replace(char, char) 
	//would return a string with a diffrent length.
	//You may assign '\u0000' (or 0). For this purpose, use Character.MIN_VALUE.
	//As Character is a class deriving from Object, you can assign null as "instance":
	//Character myChar = null;

	//7ms, 78%
    public char findTheDifference(String s, String t) {
        if (s == null || t == null)
        	return '\0';
        
        int n = t.length();
        char c = t.charAt(n-1);
        for (int i = 0; i < n - 1; i++) {
        	c ^= s.charAt(i);
        	c ^= t.charAt(i);
        }
        
        return c;
    }
	
	//8ms, 60%
    public char findTheDifference2(String s, String t) {
        if (s == null || t == null)
        	return '\0';
        
        int n = t.length();
        char c = t.charAt(n-1);
        for (int i = 0; i < n - 1; i++) {
        	c += t.charAt(i);
        	c -= s.charAt(i);
        }
        
        return c;
    }
	
	// May use array than map
    // 30ms, 9%
    public char findTheDifference1(String s, String t) {
        if (s == null || t == null)
        	return '\0';
        
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for(int i = 0; i < s.length(); i++) {
        	if(map.get(s.charAt(i)) != null)
        		map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
        	else
        		map.put(s.charAt(i), 1);
        }
        
        for (int i = 0; i < t.length(); i++) {
        	if(map.get(t.charAt(i)) == null || map.get(t.charAt(i)) < 1)
        		return t.charAt(i);
        		
        	map.put(t.charAt(i), map.get(t.charAt(i)) - 1);
        }   
        
        return '\0';
    }
}
